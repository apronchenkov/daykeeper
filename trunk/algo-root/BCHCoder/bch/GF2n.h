/**
@file GF2n.h
@author Пронченков Александр
@version 0.5
@date 05 2006
@brief Арифметика в конечных полях \f$GF(2^m)\f$ .

Определение. Множество \f$ G \f$ с операцией \f$ G \times G \rightarrow G \f$ обозначаемой '\f$ + \f$' образует (\e алебеву) \e группу если выполняются следующие аксиомы:
	- G1. операция '\f$ + \f$' ассоциативная и коммутативная: для любых \f$ a, b, c \in G \f$ \f$ (a + b) + c = a + (b + c) \f$ и \f$ a + b = b + a \f$ .

	- G2. \f$ G \f$ содержит нейтральный элемент '\f$ 0 \f$' , такой что для любого \f$ a \in G \f$: \f$ a + 0 = a = 0 + a \f$ .

	- G3. Для любого \f$ a \in G \f$ существует \e обратный \e элемент, обозначаемый '\f$ -a \f$', такой что
	\f$ a + (-a) = 0 \f$ .

Для группы \f$ G \f$ количество элементов в \f$ G \f$ называется \e порядком \e группы, и обозначается \f$ |G| \f$ .

Определение. Пусть \f$ G \f$ группа по операции '\f$ + \f$'. Не пустое, подмножество \f$ H \subseteq G \f$ называется \e подгруппой в \f$ G \f$ , если \f$ H \f$ так же является группой по операции '\f$ + \f$'.

Определим операцию \e "скалярное умножение" целого числа \f$ k \f$ на элемент поля \f$ g \f$ следующим образом:
	- если \f$ k > 0 \f$ : \f$ k * g = \underbrace {g + g + \cdots + g}_{k \textrm{ times}} \f$ ;
	- если \f$ k = 0 \f$ : \f$ 0 * g = 0 \f$ (в левой части равенства стоит ноль из целых чисел, а в правой -- нейтральный элемент группы);
	- если \f$ k < 0 \f$ : \f$ k * g = \underbrace {(-g) + (-g) + \cdots + (-g)}_{k \textrm{ times}} \f$ .

Теорема. Пусть \f$ G \f$ группа конечного порядка и \f$ h \in G \f$ , тогда множество всех элементов \f$ k * h \f$ (\f$ k \f$ натуральное) образуют подгруппу в \f$ G \f$. Такая подгруппа называется \e циклической \e подгруппой, а элемент \f$ g \f$ называется её \e порождающим \e элементом.

Теорема (Лагранжа). Пусть \f$ G \f$ группа конечного порядка и \f$ H \f$ подгруппа \f$ G \f$ . Тогда \f$ |H| \f$ делит \f$ |G| \f$ . 

Упражнение. Докажите, что для любого элемента \f$ g \f$ группы \f$ G \f$ выполняется равенство \f$ |G| * g = 0 \f$.

Сейчас мы можем рассмотреть одно необычное свойство циклических групп. Пусть \f$ G \f$ циклическая группа с порождающим элементом \f$ g \f$. Из определения следует, что для любого \f$ h \in G \f$ существует натуральное \f$ k \f$ , такое что \f$ h = k*g \f$. Теперь заметим, что \f$ h = (k\ mod\ |G|)*g \f$ , это следует из упражнения. Пусть теперь у нас есть ещё один элемент \f$ i \f$ которому соответствует скалярный множитель \f$ l \f$ , тогда
\f[ h + i = \underbrace{g + g + \cdots + g}_{k \textrm{ times}} + \underbrace{g + g + \cdots + g}_{l \textrm{ times}} = \underbrace{g + g + \cdots + g}_{k + l \textrm{ times}} = 0 + 0 + \cdots + 0 + \underbrace{g + g + \cdots + g}_{(k + l)\ mod\ |G| \textrm{ times}}. \f]
Получаем, что сложение элементов группы происходит так же как сложения целых чисел по модулю порядка группы. То есть для циклической группы получаем аналог таблицы логарифмов -- таблицу скалярных множителей.

Это необычное свойство всех циклических групп позволяет выполнять операции не с элементами группы, которые могут иметь сложную природу, а с целыми числами.

Определение. Множество \f$ F \f$ с двумя операциями \f$ F \times F \rightarrow F \f$ обозначаемыми '\f$ + \f$' и '\f$ * \f$' называется \e полем, если выполняются следующие аксиомы.
	- F1. \f$ (F, +) \f$ образуют абелеву группу.
	- F2. \f$ (F^*, *) \f$ образуют абелеву группу (\f$ F^* \f$ это \f$ F \f$ без нейтрального элемента по сложению).
	- F3. для любых элементов \f$ a, b, c \in F \f$ выполняется закон дистрибутивности: 
	\f[ a*(b + c) = (a*b) + (a*c) . \f]
	
Для '\f$ a + (-b) \f$' используется сокращённая запись '\f$ a - b \f$'. Так же используется запись '\f$ a/b \f$' для '\f$ a * b^{-1} \f$' .

Теорема. Для каждого натурального \f$ m \f$ существует (конечное) поле \f$ GF(2^m) \f$ содержащее в точности \f$ 2^m \f$ элемента. Такие поля называются двоичными.

Элементы двоичного поля \f$ GF(2^m) \f$ удобно представлять в виде битового вектора длинны \f$ m \f$ , где каждый бит является коэффициентом многочлена степени \f$ < m \f$. Чтобы сложить два элемента поля \f$ g \f$ и \f$ h \f$ необходимо выполнить сложение многочленов \f$ g + h \f$ (то есть сложить поэлементно, выполнить операцию XOR между двумя битовыми векторами). Умножение -- это умножение многочленов по модулю некоторого фиксированного сокращающего (reduction) многочлена \f$ p \f$: \f$ (g*h) mod\ p \f$ (сокращающий многочлен имеет степень \f$ m \f$ и неприводимым над \f$ GF(2) \f$)

Из того, что сложение элементов выполняется как побитовая операция XOR следует, что в двоичных полях каждый элемент сам для себя является обратным элементом по сложению: то есть, \f$ a + a = 0 \f$ для всех \f$ a \in F \f$. Из этого следует с первого взгляда удивительное равенство: \f[ (a + b)^2 = a^2 + b^2, \f]  для любых \f$ a, b \in F \f$.

Теорема. Мультипликативная группа любого конечного поля циклическая.

В данном файле реализована арифметика над бинарными полями \f$ GF(2^m) \f$ , для \f$ m \in [1, 31] \f$ .
*/
#ifndef __gf2n_h__
#define __gf2n_h__

/** 32-битное без-знаковое  целое */
typedef unsigned int u32_t;

/** Элемент поля \f$ GF(2^m) \f$ , \f$ m \in [1, 31] \f$ .
Элемент задаётся вектором из 31 бита. 0 -- нулевой элемент поля, 1 -- единичный элемент поля.
*/
typedef u32_t el_t;

/** Вспомогательный тип многочленов степени меньшей 32 над полем \f$ GF(2) \f$ .
Многочлен описывается вектором коэффициентов -- битов.
*/
typedef u32_t poly_t;

/** Описание поля \f$ GF(2^m) \f$ для \f$ m \in [1, 31] \f$ .
Описывает правила для алгебраических операций над элементами поля (el_t). Для выполнения операций умножения и деления используется алгоритм логарифмической линейки.
*/
struct gf2m_t {
	/** Сокращающий многочлен степени \f$ m \f$. */
	poly_t p;
	
	/** Cстепень сокращающего многочлена. */
	u32_t m;
	
	/** Порядок аддитивной группы поля. */
	u32_t add_order;

	/** Порядок мультипликативной группы поля. */
	u32_t mul_order;
	
	/** Порождающий элемент мультипликативной группы поля. */
	el_t alpha;
	
	/** Таблица дискретных логарифмов (аналог таблицы скалярных множителей для операции умножение) по основанию \f$ \alpha \f$ .
	\f$ \forall x \in GF^*(2^m): x = \alpha^{log[x]} \f$. Размер таблицы \f$[0, add_order) \f$ .
	@note При работе с таблицей вектор \f$ x \f$ интерпретируется как двоичная запись числа из диапазона \f$ [0, 2^m) \f$ .
	*/
	u32_t * log;

	/** Таблица степеней \f$ \alpha \f$ .
	\f$ \forall n \in [0, mul\_order): \alpha^n = exp[n]\f$ . Размер таблицы \f$ [0, mul_order) \f$ .
	*/
	el_t * exp;
};

/** Определить поле.
Создаёт структуру gf2m_t.
@param p сокращающий многочлен (степень сокращающего многочлена должна быть из (0, 32) ) 
@param alpha порождающий элемент мультипликативной группы поля
@return указатель на структуру нового поля
*/
extern struct gf2m_t * new_gf2m(poly_t p, el_t alpha);

/** Удалить поле.
Удаляет структуру gf2m_t.
@param gf2m указатель на удаляемую struct gf2m_t.
*/
extern void delete_gf2m(struct gf2m_t * gf2m);

/** Умножение элементов поля.
@param gf2m структура поля
@param a множитель
@param b множитель
@return результат операции \f$ a*b \f$
@note Множители должны принадлежать полю, иначе segf.
*/
inline const el_t mul_gf2m(const struct gf2m_t * gf2m, const el_t a, const el_t b) {
	if( 0 == a || 0 == b )
		return 0;
	return gf2m->exp[ (gf2m->log[a] + gf2m->log[b]) % gf2m->mul_order ];
}

/** Деление элементов поля.
@param gf2m структура поля
@param a делимое
@param b делитель
@return результат операции \f$ a/b \f$
@note Деление на ноль даёт результат 0.
@note Делимое и делитель должны принадлежать полю, иначе segf.
*/
inline const el_t div_gf2m(const struct gf2m_t * gf2m, const el_t a, const el_t b) {
	if( 0 == a || 0 == b )
		return 0;
	return gf2m->exp[(gf2m->mul_order + gf2m->log[a] - gf2m->log[b]) % gf2m->mul_order];
}

/** Обращение элемента мультипликативной группы поля.
@param gf2m структура поля
@param a элемент поля
@return \f$ a^{-1} \f$
@note Обратный элемент нуля -- ноль.
@note Делимое и делитель должны принадлежать полю, иначе segf.
*/
inline const el_t inv_gf2m(const struct gf2m_t * gf2m, const el_t a) {
	if( 0 == a )
		return 0;
	elseif( 1 == a )
		return 1;
	return gf2m->exp[gf2m->mul_order - gf2m->log[a]];
}

/** Сложение элементов поля.
@param gf2m структура поля
@param a слагаемое
@param b слагаемое
@return \f$ a + b \f$
@note Операции сложение и вычитание в полях \f$ GF(2^m) \f$ эквивалентны.
@note Слагаемые должны принадлежать полю.
*/
inline const el_t add_gf2m(const struct gf2m_t * gf2m, const el_t a, const el_t b) {
	return a ^ b;
}

/** Вычитание элементов поля.
@param gf2m структура поля
@param a элемент поля
@param b вычитаемое
@return \f$ a - b \f$
@note Операции сложение и вычитание в полях \f$ GF(2^m) \f$ эквивалентны.
@note Аргументы должны принадлежать полю.
*/
inline const el_t sub_gf2m(const struct gf2m_t * gf2m, const el_t a, const el_t b) {
	return a ^ b;
}

#endif // __GF2n_h__
